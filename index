<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Memory Capsule - Video Diary App</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        /* Reset and base styles */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Nunito', sans-serif;
            background-color: #FFF9F9;
            color: #7D7D7D;
            min-height: 100vh;
            padding: 20px;
            transition: background-color 0.3s ease;
        }

        /* Header styles */
        header {
            text-align: center;
            margin-bottom: 30px;
        }

        .app-title {
            font-size: 2.2rem;
            font-weight: bold;
            color: #FF85A2;
            margin-bottom: 5px;
        }

        .app-subtitle {
            font-size: 1.1rem;
            margin-bottom: 15px;
        }

        .streak-counter {
            background-color: #FFEFA1;
            border-radius: 20px;
            padding: 10px 15px;
            display: inline-block;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            font-weight: bold;
            transition: background-color 0.3s ease;
        }

        /* Main container styles */
        .recording-container {
            background-color: #FFD6E0;
            border-radius: 25px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            text-align: center;
            transition: background-color 0.3s ease;
        }

        .prompt-section h2 {
            margin-bottom: 15px;
            color: #FF5A80;
        }

        .prompt-text {
            font-size: 1.2rem;
            background-color: white;
            padding: 15px;
            border-radius: 15px;
            margin-bottom: 20px;
        }

        /* Mood selector styles */
        .mood-section {
            margin-bottom: 20px;
        }

        .mood-section label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }

        .mood-options {
            display: flex;
            justify-content: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .mood-btn {
            font-size: 1.5rem;
            background-color: white;
            border: 2px solid #eee;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .mood-btn.active {
            background-color: #C1EFFF;
            border: none;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        /* Video styles */
        .video-container {
            position: relative;
            margin-bottom: 20px;
        }

        #videoElement {
            width: 100%;
            max-height: 400px;
            border-radius: 15px;
            border: 5px solid #C1EFFF;
            background-color: #000;
            object-fit: cover;
        }

        .recording-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background-color: red;
            display: none;
        }

        .recording-indicator.active {
            display: block;
            animation: pulse 1.5s infinite;
        }

        /* Button styles */
        .button-container {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .action-btn {
            background-color: #FF85A2;
            color: white;
            border: none;
            border-radius: 50px;
            padding: 12px 25px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            gap: 8px;
            transition: background-color 0.2s ease;
        }

        .action-btn:hover {
            background-color: #FF6B8E;
        }

        .action-btn.stop {
            background-color: #FF4D6D;
        }

        .action-btn.stop:hover {
            background-color: #FF3357;
        }

        /* Collection section styles */
        .collection-section {
            margin-bottom: 30px;
        }

        .collection-title {
            margin-bottom: 15px;
            color: #FF5A80;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        /* Theme selector styles */
        .theme-section {
            margin-bottom: 15px;
            text-align: center;
        }

        .theme-section label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }

        .theme-options {
            display: flex;
            justify-content: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .theme-btn {
            background-color: white;
            border: 2px solid #FFD6E0;
            border-radius: 10px;
            padding: 8px 15px;
            cursor: pointer;
            font-weight: normal;
            transition: all 0.2s ease;
        }

        .theme-btn.active {
            background-color: #FFD6E0;
            font-weight: bold;
        }

        /* Video collection styles */
        .empty-collection {
            background-color: #C1EFFF;
            border-radius: 20px;
            padding: 25px;
            margin-top: 20px;
            text-align: center;
            transition: background-color 0.3s ease;
        }

        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .video-card {
            background-color: #C1EFFF;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
            position: relative;
            transition: transform 0.2s ease, background-color 0.3s ease;
        }

        .video-card:hover {
            transform: translateY(-5px);
        }

        .video-actions {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 10;
            display: flex;
            gap: 5px;
        }

        .delete-btn {
            background-color: #FF4D6D;
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.2s ease;
        }

        .delete-btn:hover {
            background-color: #FF3357;
        }

        .video-preview {
            width: 100%;
            border-radius: 20px 20px 0 0;
        }

        .video-info {
            padding: 15px;
        }

        .video-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .video-date {
            font-size: 0.9rem;
        }

        .video-mood {
            font-size: 1.5rem;
        }

        .video-prompt {
            background-color: rgba(255,255,255,0.7);
            padding: 10px;
            border-radius: 10px;
            font-size: 0.9rem;
            font-style: italic;
        }

        /* Footer styles */
        footer {
            margin-top: 50px;
            padding: 20px;
            border-top: 2px solid #FFD6E0;
            text-align: center;
            font-size: 0.9rem;
            transition: border-color 0.3s ease;
        }

        /* Animations */
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* Theme-specific styles */
        body.theme-sunset {
            background-color: #FFF6F0;
        }

        body.theme-sunset .streak-counter {
            background-color: #FFBE88;
        }

        body.theme-sunset .recording-container {
            background-color: #FFBE88;
        }

        body.theme-sunset .mood-btn.active {
            background-color: #FF9CDA;
        }

        body.theme-sunset #videoElement {
            border-color: #FF9CDA;
        }

        body.theme-sunset .empty-collection,
        body.theme-sunset .video-card {
            background-color: #FF9CDA;
        }

        body.theme-sunset footer {
            border-color: #FFBE88;
        }

        body.theme-sunset .theme-btn {
            border-color: #FFBE88;
        }

        body.theme-sunset .theme-btn.active {
            background-color: #FFBE88;
        }

        body.theme-forest {
            background-color: #F8FFF5;
        }

        body.theme-forest .streak-counter {
            background-color: #F6EAC9;
        }

        body.theme-forest .recording-container {
            background-color: #BDEDC8;
        }

        body.theme-forest .mood-btn.active {
            background-color: #A3D9B0;
        }

        body.theme-forest #videoElement {
            border-color: #A3D9B0;
        }

        body.theme-forest .empty-collection,
        body.theme-forest .video-card {
            background-color: #A3D9B0;
        }

        body.theme-forest footer {
            border-color: #BDEDC8;
        }

        body.theme-forest .theme-btn {
            border-color: #BDEDC8;
        }

        body.theme-forest .theme-btn.active {
            background-color: #BDEDC8;
        }

        /* Responsive adjustments */
        @media (max-width: 600px) {
            .app-title {
                font-size: 1.8rem;
            }

            .video-grid {
                grid-template-columns: 1fr;
            }

            .mood-options, .theme-options {
                gap: 5px;
            }

            .action-btn {
                padding: 10px 15px;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1 class="app-title">✨ Memories Captured ✨</h1>
        <p class="app-subtitle">Start your video diary adventure!</p>
        <div class="streak-counter">
            Day Streak: <span id="streakCount">0</span> 🔥
        </div>
    </header>

    <main>
        <div class="recording-container">
            <div class="prompt-section">
                <h2>Today's Prompt 💭</h2>
                <p id="promptText" class="prompt-text">What made you smile today?</p>
            </div>

            <div class="mood-section">
                <label>How are you feeling today?</label>
                <div class="mood-options">
                    <button class="mood-btn active" data-mood="happy">😊</button>
                    <button class="mood-btn" data-mood="sad">😢</button>
                    <button class="mood-btn" data-mood="excited">🤩</button>
                    <button class="mood-btn" data-mood="calm">😌</button>
                    <button class="mood-btn" data-mood="tired">😴</button>
                    <button class="mood-btn" data-mood="anxious">😰</button>
                </div>
            </div>

            <div class="video-container">
                <video id="videoElement" autoplay muted></video>
                <div id="recordingIndicator" class="recording-indicator"></div>
            </div>

            <div class="button-container">
                <button id="startBtn" class="action-btn">
                    <span>🎥</span> Start Recording
                </button>
                <button id="stopBtn" class="action-btn stop" style="display: none;">
                    <span>⏹️</span> Stop Recording
                </button>
            </div>
        </div>

        <div class="collection-section">
            <h2 class="collection-title">
                <span>📝</span> Your Memory Collection
            </h2>

            <div class="theme-section">
                <label>Choose Theme:</label>
                <div class="theme-options">
                    <button class="theme-btn active" data-theme="pastel">Pastel</button>
                    <button class="theme-btn" data-theme="sunset">Sunset</button>
                    <button class="theme-btn" data-theme="forest">Forest</button>
                </div>
            </div>

            <div id="videoCollection">
                <div id="emptyCollection" class="empty-collection">
                    <p style="font-size: 1.1rem;">You haven't recorded any memories yet! 🎬</p>
                    <p>Start your first recording and build your collection.</p>
                </div>
                <div id="videoGrid" class="video-grid"></div>
            </div>
        </div>
    </main>

    <footer>
        <p>Memories Captured - Capture your moments with joy! ✨</p>
        <p style="margin-top: 5px;">Made with 💖 for your daily memories</p>
    </footer>

    <script>
        // App state
        const state = {
            recordings: [],
            isRecording: false,
            currentMood: 'happy',
            theme: 'pastel',
            mediaRecorder: null,
            stream: null,
            recordedChunks: [],
            prompts: [
                "What made you smile today?",
                "Share a small win you had today!",
                "What's something you're looking forward to?",
                "What's a challenge you overcame recently?",
                "Describe your day in three words",
                "Share something new you learned today",
                "What's making you feel grateful right now?"
            ]
        };

        // DOM Elements
        const videoElement = document.getElementById('videoElement');
        const recordingIndicator = document.getElementById('recordingIndicator');
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const promptText = document.getElementById('promptText');
        const streakCount = document.getElementById('streakCount');
        const emptyCollection = document.getElementById('emptyCollection');
        const videoGrid = document.getElementById('videoGrid');
        const moodButtons = document.querySelectorAll('.mood-btn');
        const themeButtons = document.querySelectorAll('.theme-btn');

        // Set random prompt
        promptText.textContent = getRandomPrompt();

        // Load saved recordings from localStorage
        loadRecordings();

        // Calculate and display streak
        updateStreak();

        // Event Listeners
        startBtn.addEventListener('click', startRecording);
        stopBtn.addEventListener('click', stopRecording);

        // Mood selection
        moodButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                moodButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                state.currentMood = btn.dataset.mood;
            });
        });

        // Theme selection
        themeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                themeButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                state.theme = btn.dataset.theme;
                
                // Update theme classes on body
                document.body.classList.remove('theme-pastel', 'theme-sunset', 'theme-forest');
                if (state.theme !== 'pastel') {
                    document.body.classList.add(`theme-${state.theme}`);
                }
            });
        });

        // Functions
        async function startRecording() {
            try {
                state.stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                videoElement.srcObject = state.stream;
                
                state.mediaRecorder = new MediaRecorder(state.stream);
                state.recordedChunks = [];
                
                state.mediaRecorder.ondataavailable = (e) => {
                    if (e.data.size > 0) {
                        state.recordedChunks.push(e.data);
                    }
                };
                
                state.mediaRecorder.onstop = saveRecording;
                
                state.mediaRecorder.start();
                state.isRecording = true;
                
                // Update UI
                recordingIndicator.classList.add('active');
                startBtn.style.display = 'none';
                stopBtn.style.display = 'flex';
            } catch (err) {
                console.error("Error accessing camera:", err);
                alert("Could not access your camera. Please check permissions.");
            }
        }

        function stopRecording() {
            if (state.mediaRecorder && state.isRecording) {
                state.mediaRecorder.stop();
                state.stream.getTracks().forEach(track => track.stop());
                state.isRecording = false;
                
                // Update UI
                recordingIndicator.classList.remove('active');
                startBtn.style.display = 'flex';
                stopBtn.style.display = 'none';
            }
        }

        function saveRecording() {
            const blob = new Blob(state.recordedChunks, { type: 'video/webm' });
            const url = URL.createObjectURL(blob);
            const timestamp = new Date().toISOString();
            
            const newRecording = {
                id: timestamp,
                url: url,
                blob: blob, // Store the blob for localStorage
                mood: state.currentMood,
                date: new Date().toLocaleDateString(),
                prompt: promptText.textContent
            };
            
            state.recordings.unshift(newRecording); // Add to beginning of array
            
            // Save to localStorage
            saveToLocalStorage();
            
            // Update UI
            updateCollectionUI();
            
            // Update streak
            updateStreak();
            
            // Set new prompt
            promptText.textContent = getRandomPrompt();
        }

        function deleteRecording(id) {
            state.recordings = state.recordings.filter(recording => recording.id !== id);
            saveToLocalStorage();
            updateCollectionUI();
        }

        function updateCollectionUI() {
            if (state.recordings.length === 0) {
                emptyCollection.style.display = 'block';
                videoGrid.style.display = 'none';
                return;
            }
            
            emptyCollection.style.display = 'none';
            videoGrid.style.display = 'grid';
            
            videoGrid.innerHTML = '';
            
            state.recordings.forEach(recording => {
                const card = document.createElement('div');
                card.className = 'video-card';
                
                // Convert emoji code to actual emoji
                const moodEmoji = getMoodEmoji(recording.mood);
                
                card.innerHTML = `
                    <div class="video-actions">
                        <button class="delete-btn" data-id="${recording.id}">🗑️</button>
                    </div>
                    <video class="video-preview" src="${recording.url}" controls></video>
                    <div class="video-info">
                        <div class="video-meta">
                            <span class="video-date">${recording.date}</span>
                            <span class="video-mood">${moodEmoji}</span>
                        </div>
                        <div class="video-prompt">
                            <span style="font-weight: bold">Prompt:</span> ${recording.prompt}
                        </div>
                    </div>
                `;
                
                videoGrid.appendChild(card);
                
                // Add delete event listener
                const deleteBtn = card.querySelector('.delete-btn');
                deleteBtn.addEventListener('click', () => deleteRecording(recording.id));
            });
        }

        function getRandomPrompt() {
            return state.prompts[Math.floor(Math.random() * state.prompts.length)];
        }

        function getMoodEmoji(mood) {
            const emojis = {
                happy: '😊',
                sad: '😢',
                excited: '🤩',
                calm: '😌',
                tired: '😴',
                anxious: '😰'
            };
            return emojis[mood] || '😊';
        }

        function calculateStreak() {
            if (state.recordings.length === 0) return 0;
            
            let streak = 1;
            let currentDate = new Date();
            currentDate.setHours(0, 0, 0, 0);
            
            // Check if there's a recording from today
            const hasRecordingToday = state.recordings.some(recording => {
                const recordDate = new Date(recording.date);
                return recordDate.toDateString() === currentDate.toDateString();
            });
            
            if (!hasRecordingToday) {
                currentDate.setDate(currentDate.getDate() - 1);
            }
            
            let prevDate = new Date(currentDate);
            prevDate.setDate(prevDate.getDate() - 1);
            
            while (true) {
                const hasRecording = state.recordings.some(recording => {
                    const recordDate = new Date(recording.date);
                    return recordDate.toDateString() === prevDate.toDateString();
                });
                
                if (hasRecording) {
                    streak++;
                    prevDate.setDate(prevDate.getDate() - 1);
                } else {
                    break;
                }
            }
            
            return streak;
        }

        function updateStreak() {
            streakCount.textContent = calculateStreak();
        }

        // LocalStorage functions
        function saveToLocalStorage() {
            try {
                // Convert blobs to base64 strings for storage
                const recordingsToSave = state.recordings.map(recording => {
                    // Create a new object without the blob
                    const { blob, ...recordingWithoutBlob } = recording;
                    return recordingWithoutBlob;
                });
                
                localStorage.setItem('memoryBubbleRecordings', JSON.stringify(recordingsToSave));
            } catch (error) {
                console.error('Error saving to localStorage:', error);
            }
        }

        function loadRecordings() {
            try {
                const savedRecordings = localStorage.getItem('memoryBubbleRecordings');
                if (savedRecordings) {
                    state.recordings = JSON.parse(savedRecordings);
                    updateCollectionUI();
                }
            } catch (error) {
                console.error('Error loading from localStorage:', error);
            }
        }
    </script>
</body>
</html>
